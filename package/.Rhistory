runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
roxygen2::roxygenise()
setwd("package")
roxygen2::roxygenise()
pkgload::dev_help('LogisticRegression')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
library(sisemlr)
model$predict()
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv"
delimiter = "delimiter"
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv"
delimiter = ","
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model$predict()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:\Users\hugoc\Documents\GitHub\multinomial_logistic_regression_package\data\iris_extended.csv",
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
model$fit(
learning_rate = 0.01,
max_iter = 1000,
batch_size = 50,
tol = 0.001
)
model$predict()
model$print()
model$summary()
model$generate_confusion_matrix()
model$variable_importance()
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
model$fit(
learning_rate = 0.01,
max_iter = 1000,
batch_size = 50,
tol = 0.001
)
model$variable_importance()
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
?LogisticRegression
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Select variables based on importance threshold
model$var_select(threshold = 0.05)
# Select the top 10 most important variables
model$var_select(num_vars = 10)
# Select the top 10 most important variables
model$var_select(num_vars = 1)
# Make predictions on the test set
accuracy <- model$predict()
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Make predictions on the test set
accuracy <- model$predict()
# Print the accuracy of the model on the test data
print(accuracy)
# Predict probabilities for the test set
probabilities <- model$predict_proba()
# Print the predicted probabilities
print(probabilities)
# Print the model summary
model$summary()
# Print the model information
model$print()
# Generate a confusion matrix and performance metrics
results <- model$generate_confusion_matrix()
print(results$confusion_matrix)
print(results$accuracy)
print(results$confusion_matrix)
print(results$accuracy)
print(results$precision)
print(results$recall)
print(results$f1_score)
roxygen2::roxygenise()
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Select variables based on importance threshold
model$var_select(threshold = 0.05)
# Select the top 10 most important variables
model$var_select(num_vars = 1)
# Make predictions on the test set
accuracy <- model$predict()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Select the top 10 most important variables
model$var_select(num_vars = 1)
# Make predictions on the test set
accuracy <- model$predict()
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Make predictions on the test set
accuracy <- model$predict()
# Print the accuracy of the model on the test data
print(accuracy)
# Predict probabilities for the test set
probabilities <- model$predict_proba()
# Print the predicted probabilities
print(probabilities)
# Print the model summary
model$summary()
# Print the model information
model$print()
# Generate a confusion matrix and performance metrics
results <- model$generate_confusion_matrix()
print(results$confusion_matrix)
print(results$accuracy)
print(results$precision)
print(results$recall)
print(results$f1_score)
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Make predictions on the test set
accuracy <- model$predict()
# Print the accuracy of the model on the test data
print(accuracy)
# Predict probabilities for the test set
probabilities <- model$predict_proba()
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
roxygen2::roxygenise()
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
runApp('~/GitHub/multinomial_logistic_regression_package/interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
library(shiny); runApp('interface.r')
library(shiny); runApp('interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
library(shiny); runApp('interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
library(shiny); runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
runApp('interface.r')
roxygen2::roxygenise()
getdw()
setdw("Documents")
getdw
getwd()
setwd("package")
roxygen2::roxygenise()
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
devtools::install_github("hugocollin/multinomial_logistic_regression_package/package")
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
library(sisemlr)
?LogisticRegression
model <- LogisticRegression$new(
file_path = "C:/Users/hugoc/Documents/GitHub/multinomial_logistic_regression_package/data/iris_extended.csv",
delimiter = ","
)
# Handle missing values by replacing numerical NAs with mean and categorical NAs with mode
model$handle_missing_values(num_method = "mean", cat_method = "mode")
# Automatically select target with specified thresholds
model$target_select(entropy_threshold = 0.5, correlation_threshold = 0.3, weight_entropy = 0.7, weight_correlation = 0.3)
model$prepare_data(
target = "species",
columns_to_remove = "",
test_size = 0.3
)
# Fit the model with specified hyperparameters
model$fit(learning_rate = 0.01, max_iter = 1000, batch_size = 50, tol = 0.001)
# Calculate variable importance for a fitted model
importance <- model$var_importance()
# View the importance of the variables
print(importance)
# Make predictions on the test set
accuracy <- model$predict()
# Print the accuracy of the model on the test data
print(accuracy)
# Predict probabilities for the test set
probabilities <- model$predict_proba()
# Print the predicted probabilities
print(probabilities)
# Print the model summary
model$summary()
# Print the model information
model$print()
# Generate a confusion matrix and performance metrics
results <- model$generate_confusion_matrix()
print(results$confusion_matrix)
print(results$accuracy)
print(results$precision)
print(results$recall)
print(results$f1_score)
